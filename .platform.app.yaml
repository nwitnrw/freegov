# This file describes an application. You can have multiple applications
# in the same project.
#
# See https://docs.platform.sh/user_guide/reference/platform-app-yaml.html

# The name of this app. Must be unique within a project.
name: 'app'

# The runtime the application uses.
type: 'php:7.2'

# Configuration of the build of this application.
build:
    flavor: none

# The build-time dependencies of the app.
dependencies:
    php:
        'drush/drush': '^9.0'
        'drupal/console': '@stable'

runtime:
    extensions:
        - newrelic
        - memcached
        - imagick

# The relationships of the application with services or other applications.
#
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
    database: 'mysqldb:mysql'
    cache: "memcached:memcached"
#    solr: 'solrsearch:solr'
#    redis: 'rediscache:redis'

variables:
    php:
        memory_limit: 1024M
        upload_max_filesize: 512M
        post_max_size: 512M

# The configuration of app when it is exposed to the web.
web:
    # Specific parameters for different URL prefixes.
    locations:
        '/':
            # The folder from which to serve static assets, for this location.
            #
            # This is a filesystem path, relative to the application root.
            root: 'project/docroot'

            # How long to allow static assets from this location to be cached.
            #
            # Can be a time in seconds, or -1 for no caching. Times can be
            # suffixed with "s" (seconds), "m" (minutes), "h" (hours), "d"
            # (days), "w" (weeks), "M" (months, as 30 days) or "y" (years, as
            # 365 days).
            expires: 5m

            # Whether to forward disallowed and missing resources from this
            # location to the application.
            #
            # Can be true, false or a URI path string.
            passthru: '/index.php'

            # Deny access to static files in this location.
            allow: false

            # Rules for specific URI patterns.
            rules:
                # Allow access to common static files.
                '\.(jpe?g|png|gif|svgz?|css|js|map|ico|bmp|eot|woff2?|otf|ttf)$':
                    allow: true
                '^/robots\.txt$':
                    allow: true
                '^/sitemap\.xml$':
                    allow: true

        '/sites/default/files':
            # Allow access to all files in the public files directory.
            allow: true
            expires: 5m
            passthru: '/index.php'
            root: 'project/docroot/sites/default/files'

            # Do not execute PHP scripts.
            scripts: false

            rules:
                # Provide a longer TTL (2 weeks) for aggregated CSS and JS files.
                '^/sites/default/files/(css|js)':
                    expires: 2w

# The size of the persistent disk of the application (in MB).
disk: 2048

# The 'mounts' describe writable, persistent filesystem mounts in the application. The keys are
# directory paths, relative to the application root. The values are strings such as
# 'shared:files/NAME', where NAME is just a unique name for the mount.
mounts:
    '/project/docroot/sites/default/files': 'shared:files/files'
    '/tmp': 'shared:files/tmp'
    '/private': 'shared:files/private'
    '/drush-backups': 'shared:files/drush-backups'

# The hooks executed at various points in the lifecycle of the application.
hooks:

    build: |
      curl -sS https://platform.sh/cli/installer | php

    # The deploy hook runs after your application has been deployed and started.
    deploy: |
      cd project
      drush ev "drupal_flush_all_caches();"
      drush locale-check
      drush locale-update
      drush -y cache-rebuild
      drush -y updatedb
      drush -y entup

# The configuration of scheduled execution.
crons:
    drupal:
        spec: '*/5 * * * *'
        cmd: 'cd project/docroot ; drush core-cron'
    # Create a snapshot at 12:00 and 18:00 if environment variable 'DO_BACKUP' equals 'yes'
    snapshot-create:
        spec: '0 12,18,22 * * *'
        cmd: |
          if [ "$PLATFORM_BRANCH" = master -a $DO_BACKUP = "yes" ]; then
            platform snapshot:create --yes --no-wait --project=$PLATFORM_PROJECT -e $PLATFORM_BRANCH
          fi
    # Restore the last snapshot at 04:00 if environment variable 'DO_BACKUP' equals 'no' on master system
    snapshot-restore:
        spec: '0 4 * * *'
        cmd: |
          if [ "$PLATFORM_BRANCH" = master -a $DO_BACKUP = "no" ]; then
              platform snapshot:restore --yes --no-wait --project=$PLATFORM_PROJECT -e $PLATFORM_BRANCH $(platform snapshots --project=$PLATFORM_PROJECT -e master  --limit=1 | grep -E  "[a-z0-9]{26,26}" -o)
          fi
