<?php

/**
 * @file
 * The deGov password policy module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\degov_password_policy\Validate\PasswordHistory;
use Drupal\degov_password_policy\Validate\PasswordPolicy;

/**
 * Add custom validation functions and additional submit function to user form.
 *
 * Implements hook_form_FORM_ID_alter().
 */
function degov_password_policy_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = [PasswordPolicy::class, 'validate'];
  $form['#validate'][] = [PasswordHistory::class, 'validate'];
  $form['actions']['submit']['#submit'][] = '_degov_password_policy_user_form_submit';
}

/**
 * Set user password reset timestamp to now for new users.
 *
 * Implements hook_ENTITY_TYPE_presave().
 */
function degov_password_policy_user_presave(EntityInterface $entity) {
  if (!$entity->id()) {
    /** @var \Drupal\degov_password_policy\Service\PasswordChangeService $changeService */
    $changeService = \Drupal::service('degov_password_policy.service.password_change');
    $date = $changeService->getCurrentTime();

    $entity->set('field_last_password_reset', $date);
    $entity->set('field_password_expiration', NULL);
  }
}

/**
 * Implements hook_cron().
 */
function degov_password_policy_cron() {
  /** @var \Drupal\degov_password_policy\Service\PasswordChangeService $changeService */
  $changeService = \Drupal::service('degov_password_policy.service.password_change');
  $changeService->expirePasswords();
}

/**
 * Handles the submission of the user form.
 *
 * @param array $form
 *   An array representing the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function _degov_password_policy_user_form_submit(array &$form, FormStateInterface $form_state): void {
  $currentPass = $form_state->getValue('current_pass');
  $newPass = $form_state->getValue('pass');
  $user = $form_state->getFormObject()->getEntity();
  $uid = $user->id();

  if ($uid && $currentPass && $newPass) {
    /** @var \Drupal\degov_password_policy\Service\PasswordChangeService $changeService */
    $changeService = \Drupal::service('degov_password_policy.service.password_change');
    $date = $changeService->getCurrentTime();

    $user->set('field_last_password_reset', $date);
    $user->set('field_password_expiration', NULL);
    $user->save();

    /** @var \Drupal\degov_password_policy\Service\PasswordHistoryService $historyService */
    $historyService = \Drupal::service('degov_password_policy.service.password_history');
    $historyService->insertPasswordHash((int) $uid, $newPass);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function degov_password_policy_user_insert(AccountInterface $account) {
  /** @var \Drupal\degov_password_policy\Service\PasswordHistoryService $historyService */
  $historyService = \Drupal::service('degov_password_policy.service.password_history');
  $historyService->insertPasswordHash($account->id(), $account->getPassword(), TRUE);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function degov_password_policy_user_delete(AccountInterface $account) {
  /** @var \Drupal\degov_password_policy\Service\PasswordHistoryService $historyService */
  $historyService = \Drupal::service('degov_password_policy.service.password_history');
  $historyService->deleteUserEntry($account);
}

/**
 * Implements hook_locale_translation_projects_alter().
 */
function degov_password_policy_locale_translation_projects_alter(&$projects) {
  $projects['degov_password_policy'] = [
    'info' => [
      'name'                                 => 'deGov - Password Policy',
      'interface translation project'        => 'degov_password_policy',
      'interface translation server pattern' => drupal_get_path('module', 'degov_password_policy') . '/translations/%language.po',
    ],
  ];
}
