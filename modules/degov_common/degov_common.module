<?php

/**
 * @file
 * Drupal hooks implementations for the degov_common module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\degov_common\DegovOverride;
use Drupal\degov_common\Plugin\views\filter\DegovBundle;
use Drupal\file\FileInterface;
use Drupal\locale\SourceString;
use Drupal\media\Entity\Media;
use Drupal\media\MediaInterface;

/**
 * Implements hook_views_plugins_filter_alter().
 */
function degov_common_views_plugins_filter_alter(array &$plugins) {
  DegovOverride::pluginClass($plugins['bundle'], DegovBundle::class);
}

/**
 * Implements hook_views_data_alter().
 */
function degov_common_views_data_alter(array &$data) {
  // Add the usage field to media.
  $data['media']['usage'] = [
    'title' => t('Media Usage'),
    'field' => [
      'title' => t('Usage'),
      'help' => t('Shows the list of media usage.'),
      'id' => 'degov_media_usage',
    ],
  ];
}

/**
 * Implements hook_theme().
 */
function degov_common_theme() {
  return [
    'degov_file_download_link' => [
      'variables' => [
        'file'                   => NULL,
        'download_link'          => NULL,
        'icon'                   => '',
        'file_size'              => NULL,
        'attributes'             => NULL,
        'additional_information' => NULL,
      ],
    ],
    'degov_user_profile_link'  => [
      'variables' => [
        'logged_in' => FALSE,
      ],
      'template'  => 'degov-user-profile-link',
    ],
  ];
}

/**
 * Returns a Url for a file download.
 *
 * @param \Drupal\file\FileInterface $file
 * @param array $options
 *   (optional) Options for the URL object.
 *
 * @return \Drupal\Core\Url An Url object for the download url.
 * An Url object for the download url.
 */
function degov_common_file_download_link(FileInterface $file, array $options = []) {
  return new Url('degov_common.file_download', ['file' => $file->id()], $options);
}

/**
 * Implements hook_preprocss_HOOK for theme_degov_file_download_link().
 */
function degov_common_preprocess_degov_file_download_link(&$variables) {
  /** @var \Drupal\file\FileInterface $file */
  $file = $variables['file'];
  $mime_type = $file->getMimeType();
  $mime_type = explode('/', $mime_type);
  if (!empty($mime_type[1])) {
    $variables['file_type'] = $mime_type[1];
  }
  else {
    $variables['file_type'] = pathinfo($file->getFileUri(), PATHINFO_EXTENSION);
  }
}

/**
 * @param \Drupal\file\FileInterface $file
 *
 * @return array
 */
function degov_common_file_download_render_array($file, string $additional_information = ''): array {
  if ($file instanceof FileInterface) {
    // Prepare the attributes for the main container of the template.
    $attributes = new Attribute();
    // Prepare the text and the URL of the link.
    $mime_type = $file->getMimeType();
    $download_url = degov_common_file_download_link($file, ['attributes' => ['type' => $mime_type . '; length=' . $file->getSize()]]);
    return [
      '#theme'                  => 'degov_file_download_link',
      '#file'                   => $file,
      '#download_link'          => Link::fromTextAndUrl(t('Download'), $download_url),
      '#icon'                   => file_icon_class($mime_type),
      '#attributes'             => $attributes,
      '#file_size'              => format_size($file->getSize()),
      '#additional_information' => $additional_information,
    ];
  }
  return [];
}

/**
 * Implements hook_module_implements_alter().
 */
function degov_common_module_implements_alter(&$implementations, $hook) {
  if (in_array($hook, ['views_plugins_filter_alter', 'form_alter'])) {
    $group = $implementations['degov_common'];
    unset($implementations['degov_common']);
    $implementations['degov_common'] = $group;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function degov_common_preprocess_node(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  // Remove the right sidebar paragraph in case no content exists.
  if ($node->hasField('field_sidebar_right_paragraphs') && !empty($variables['content']['field_sidebar_right_paragraphs'])) {
    unset($variables['content']['field_sidebar_right_paragraphs']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function degov_common_media_view_alter(array &$build, MediaInterface $entity, EntityViewDisplayInterface $display) {
  // Skip adding contextual links if the Paragraph is in a QuickEdit form context
  // to avoid causing conflicts with Quickedit JS.
  if (\Drupal::routeMatch()->getRouteName() === 'quickedit.field_form') {
    return;
  }

  $build['#contextual_links']['media'] = [
    'route_parameters' => [
      'media' => $entity->id(),
    ],
    'metadata' => ['changed' => $entity->getChangedTime()],
  ];
}

/**
 * Implements hook_modules_installed().
 */
function degov_common_modules_installed($modules) {
  foreach ($modules as $module) {
    \Drupal::service('degov_config.block_installer')->placeBlockConfig($module);
    \Drupal::service('degov_config.updater')
      ->checkOptional(drupal_get_path('module', $module) . '/config/optional');

    /** @var \Drupal\degov_common\TranslationImport $translation_import */
    $translation_import = \Drupal::service('degov_common.translation_import');
    $translation_import->import($module);
  }
  // Flush plugin caches so our facets will be shown.
  \Drupal::service('plugin.cache_clearer')->clearCachedDefinitions();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function degov_common_form_entity_browser_ckeditor_media_browser_form_alter(array &$form) {
  // Add styles for the ckeditor media browser.
  $form['#attached']['library'][] = 'lightning_media/browser.styling';
}

/**
 * Implements hook_form_FORM_ID_alter() for entity_browser_media_browser.
 */
function degov_common_form_entity_browser_media_browser_form_alter(array &$form) {
  // Add styles for the media browser.
  $form['#attached']['library'][] = 'degov_common/browser.styling';
  if (!empty($form['selection_display'])) {
    $form['#attributes']['class'][] = 'with-selection clearfix';
    $form['widget_selector']['#prefix'] = '<div class="widget-area">';
    $form['widget']['#suffix'] = '</div>';
    $form['selection_display']['#prefix'] = '<div class="selection-area"><h3>' . t('Selected Items') . '</h3>';
    $form['selection_display']['#suffix'] = '</div>';
    $form['widget']['actions']['submit']['#value'] = t('Select');
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for menu_link_content_menu_link_content.
 */
function degov_common_form_menu_link_content_menu_link_content_form_alter(array &$form) {
  // Alter menu add/edit form.
  if (!empty($form['link']['widget'][0]['options']['attributes']['class'])) {
    $form['link']['widget'][0]['options']['attributes']['class']['#description'] = t('Click on this field and use the icon picker to select the Font Awesome icon css class for this menu item (first level items only).');
  }
}

/**
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param string $entity_type
 *
 * @return mixed
 */
function degov_media_label_callback($entity) {
  if ($entity instanceof Media) {
    if ($entity->hasField('field_title') && !$entity->get('field_title')->isEmpty()) {
      return $entity->get('field_title')->value;
    }
    return $entity->name->value;
  }
}

/**
 * Implements hook_form_alter().
 */
function degov_common_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\Form\FormInterface $form_object */
  $form_object = $form_state->getFormObject();

  if (method_exists($form_object, 'getBaseFormId')) {
    // Alter node forms.
    if ($form_object->getBaseFormId() === 'node_form') {
      // Add the novalidate attribute to node forms. Without this, it is difficult
      // to find out why form validation failed (with required fields in hidden
      // field groups).
      $form['#attributes']['novalidate'] = TRUE;
    }

    // Alter media forms.
    if ($form_object->getBaseFormId() === 'media_form') {
      // field_media_in_library now is deprecated, let's restrict access to it.
      // @TODO the field comes from lightning, remove the code after eliminating the dependency on Lightning profile.
      if (!empty($form['field_media_in_library'])) {
        $form['field_media_in_library']['#access'] = FALSE;
      }
      // Add the novalidate attribute to media forms. Without this, it is difficult
      // to find out why form validation failed (with required fields in hidden
      // field groups).
      $form['#attributes']['novalidate'] = TRUE;
    }
  }

  // Alter entity embed forms.
  if (\in_array($form_id, [
    'entity_browser_media_browser_form',
    'entity_browser_ckeditor_media_browser_form',
  ])) {
    $form['#attributes']['novalidate'] = TRUE;
  }
}

/**
 * @throws \Drupal\locale\StringStorageException
 */
function degov_common_add_translation(string $source_string, string $langcode, string $translated_string):void {
  // Find existing source string.
  $storage = \Drupal::service('locale.storage');
  $string = $storage->findString(['source' => $source_string]);
  if (is_null($string)) {
    $string = new SourceString();
    $string->setString($source_string);
    $string->setStorage($storage);
    $string->save();
  }
  // Create translation. If one already exists, it will be replaced.
  $translation = $storage->createTranslation([
    'lid' => $string->lid,
    'language' => $langcode,
    'translation' => $translated_string,
  ]);
  $translation->save();
}
